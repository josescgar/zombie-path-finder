{"version":3,"sources":["utils/stepper.js","components/Cell.js","components/Board.js","algorithms/dfs.js","App.js","serviceWorker.js","index.js"],"names":["Stepper","fn","delay","queue","isExecuting","move","length","next","shift","setTimeout","exec","args","push","Cell","props","cell","row","col","isStart","isFinish","isVisited","isStacked","isPath","isBlocked","classes","classNames","className","onClick","role","aria-label","initialBoardState","board","boardReducer","state","action","type","payload","map","i","j","column","setup","rows","columns","start","finish","Array","fill","_","id","resetBoard","Board","useReducer","boardState","boardDispatch","useState","gridStyle","setGridStyle","useEffect","gridTemplate","stepper","stepDelay","matrix","onVisit","onStack","visited","stacked","initial","dfs","element","pop","elRow","elCol","top","indexOf","right","bottom","left","DFSSearch","forEach","style","key","blockCell","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e414759d.chunk.js","sourcesContent":["export function Stepper(fn, delay) {\n    \n    const queue = [];\n    let isExecuting = false;\n\n    function exec(...args) {\n\n        queue.push([...args]);\n        move();\n    };\n\n    function move() {\n        if (queue.length === 0 || isExecuting) {\n            return;\n        }\n\n        isExecuting = true;\n        const next = queue.shift();\n        setTimeout(() => {\n            fn(...next);\n            isExecuting = false;\n            move();\n        }, delay);\n    }\n\n    return {\n        exec\n    };\n}","import React from 'react';\nimport classNames from 'classnames';\n\nfunction Cell(props) {\n\n    const {\n        cell: {\n            row,\n            col,\n            isStart,\n            isFinish,\n            isVisited,\n            isStacked,\n            isPath,\n            isBlocked\n        }\n    } = props;\n\n    const classes = classNames('cell', {\n        'is-visited': isVisited,\n        'is-stacked': !isVisited && isStacked,\n        'is-path': isPath,\n        'is-blocked': isBlocked\n    });\n\n    return (\n        <div className={classes} onClick={props.onClick}>\n            {row}-{col}\n            { isStart && <span role=\"img\" aria-label=\"start\"> üèÉ‚Äç‚ôÇÔ∏è</span> }\n            { isFinish && <span role=\"img\" aria-label=\"finish\"> üèÅ</span> }\n        </div>\n    )\n\n}\n\nexport default Cell;","import React, { useEffect, useReducer, useState } from 'react';\nimport { DFSSearch } from '../algorithms';\nimport { Stepper } from '../utils';\nimport Cell from './Cell';\n\nconst initialBoardState = {\n    board: []\n};\n\nfunction resetBoard(setup) {\n    const { rows, columns, start, finish } = setup;\n\n    return {\n        ...initialBoardState,\n        board: Array(rows).fill()\n            .map((_, i) => {\n                return Array(columns).fill()\n                    .map((_, j) => ({\n                        id: `${i}${j}`,\n                        row: i,\n                        col: j,\n                        isStart: i === start.row && j === start.column,\n                        isFinish: i === finish.row && j === finish.column,\n                        isBlocked: false,\n                        isVisited: false,\n                        isStacked: false,\n                        isPath: false\n                    }));\n            })\n    };\n}\n\nfunction boardReducer(state, action) {\n    const { type, payload } = action;\n    switch (type) {\n        case 'visit':\n        case 'stack':\n        case 'path':\n        case 'block':\n            return {\n                ...state,\n                board: state.board.map((row, i) => {\n                    return i !== payload.row ? row : row.map((cell, j) => {\n                        return j !== payload.column ? cell : {\n                            ...cell,\n                            isVisited: type === 'visit' || cell.isVisited,\n                            isStacked: type === 'stack' || cell.isStacked,\n                            isPath: type === 'path' || cell.isPath,\n                            isBlocked: type === 'block' || cell.isBlocked\n                        };\n                    })\n                })\n            };\n        case 'reset':\n            return resetBoard(payload);\n        default:\n            return state;\n    }\n}\n\nfunction Board(props) {\n\n    const [boardState, boardDispatch] = useReducer(boardReducer, initialBoardState);\n\n    const [gridStyle, setGridStyle] = useState(null);\n\n    useEffect(() => {\n        boardDispatch({ type: 'reset', payload: props.setup });\n        setGridStyle({\n            gridTemplate: `repeat(${props.setup.rows}, 1fr) / repeat(${props.setup.columns}, 1fr)`\n        });\n    }, [props.setup]);\n\n    function calculatePath() {\n        const stepper = new Stepper(boardDispatch, props.setup.stepDelay);\n\n        const path = DFSSearch(\n            boardState.board,\n            props.setup.start,\n            props.setup.finish,\n            (row, column) => stepper.exec({ type: 'visit', payload: { row, column } }),\n            (row, column) => stepper.exec({ type: 'stack', payload: { row, column } })\n        );\n\n        path.forEach((cell) => stepper.exec({ type: 'path', payload: { row: cell.row, column: cell.col } }));\n    }\n\n    function blockCell(cell) {\n        boardDispatch({ type: 'block', payload: { row: cell.row, column: cell.col }});\n    }\n\n    return (\n        <div>\n            <div>\n                <button onClick={calculatePath}>Calculate</button>\n            </div>\n            <div className=\"board\" style={gridStyle}>\n                {boardState.board.map((row) => {\n                    return row.map((cell) => (\n                        <Cell cell={cell} key={cell.id} onClick={() => blockCell(cell)}/>\n                    ))\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default Board;","export function DFSSearch(matrix, start, finish, onVisit, onStack) {\n    const visited = [];\n    const stacked = [];\n\n    const initial = matrix[start.row][start.column];\n    \n    stacked.push(initial);\n    onStack(initial.row, initial.col);\n\n    dfs(visited, stacked);\n    \n    return visited;\n\n    function dfs(visited, stacked) {\n\n        if (stacked.length === 0) {\n            return;\n        }\n\n        const element = stacked.pop();\n        const { row: elRow, col: elCol } = element;\n\n        if (elRow === finish.row && elCol === finish.column) {\n            return;\n        }\n\n        visited.push(element);\n        onVisit(elRow, elCol);\n\n        const top = matrix[elRow - 1] && matrix[elRow - 1][elCol];\n        if (top && visited.indexOf(top) === -1 && !top.isBlocked) {\n            stacked.push(top);\n            onStack(top.row, top.col);\n        }\n\n        const right = matrix[elRow][elCol + 1];\n        if (right && visited.indexOf(right) === -1 && !right.isBlocked) {\n            stacked.push(right);\n            onStack(right.row, right.col);\n        }\n\n        const bottom = matrix[elRow + 1] && matrix[elRow + 1][elCol];\n        if (bottom && visited.indexOf(bottom) === -1 && !bottom.isBlocked) {\n            stacked.push(bottom);\n            onStack(bottom.row, bottom.col);\n        }\n\n        const left = matrix[elRow][elCol - 1];\n        if (left && visited.indexOf(left) === -1 && !left.isBlocked) {\n            stacked.push(left);\n            onStack(left.row, left.col);\n        }\n\n        dfs(visited, stacked);\n    }\n}\n\n","import React, { useState } from 'react';\nimport Board from './components/Board';\n\nfunction App() {\n  const [setup] = useState({\n    rows: 10,\n    columns: 16,\n    start: { row: 1, column: 14 },\n    finish: { row: 7, column: 12 },\n    stepDelay: 10\n  });\n\n  return (\n    <div>\n      <Board setup={setup} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}